[gd_scene load_steps=9 format=2]

[ext_resource path="res://scenes/Levels/MapTiles.tres" type="TileSet" id=1]
[ext_resource path="res://scenes/LevelObjects/SimpleLight/SimpleLight.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/Player/Player.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/PlayerUI/Pause/PauseScreen.tscn" type="PackedScene" id=4]
[ext_resource path="res://scenes/Levels/BaseLevel/BaseLevel.gd" type="Script" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(0.35, 0.48, 0.95, 1.0);
uniform float noise_scale = 20.0;
uniform float alpha_power = 2.0;
uniform int OCTAVES = 1;
uniform float TIME_FACTOR = 1.0;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(56, 78)) * 1000.0) * 1000.0);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

void fragment() {
	vec2 coord = UV * noise_scale;
	float abs_time = TIME * TIME_FACTOR;
	vec2 motion = vec2( fbm(coord + vec2(abs_time * -0.5, abs_time * 0.5)) );
	float final = fbm(coord + motion);
	COLOR = vec4(color.rgb, pow(final, alpha_power) * color.a);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/color = Color( 0.172549, 0.184314, 0.235294, 1 )
shader_param/noise_scale = 3.0
shader_param/alpha_power = 2.0
shader_param/OCTAVES = 3
shader_param/TIME_FACTOR = 0.3

[sub_resource type="NoiseTexture" id=3]
seamless = true

[node name="BaseLevel" type="Node2D"]
script = ExtResource( 5 )

[node name="Background" type="Polygon2D" parent="."]
material = SubResource( 2 )
texture = SubResource( 3 )
polygon = PoolVector2Array( 384, 64, 128, 320, 128, 576, 256, 576, 384, 448, 640, 448, 768, 576, 896, 576, 896, 320, 640, 64 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="PauseScreen" parent="CanvasLayer" instance=ExtResource( 4 )]
visible = false

[node name="MapTiles" type="TileMap" parent="."]
tile_set = ExtResource( 1 )
format = 1
tile_data = PoolIntArray( 5, 5, 0, 6, 1, 0, 8, 1, 0, 10, 6, 0, 65540, 16, 0, 65546, 17, 0, 196610, 16, 0, 196620, 17, 0, 262145, 5, 0, 262158, 6, 0, 327681, 2, 0, 327694, 3, 0, 458753, 2, 0, 458756, 18, 0, 458758, 20, 0, 458760, 20, 0, 458762, 15, 0, 458766, 3, 0, 589825, 4, 0, 589826, 20, 0, 589828, 19, 0, 589835, 4, 0, 589836, 20, 0, 589838, 19, 0 )

[node name="Lights" type="Node2D" parent="."]

[node name="SimpleLight" parent="Lights" instance=ExtResource( 2 )]
position = Vector2( 512, 64 )
rotation = 3.14159
cycle_length = 5.0
strength = 1.5
direction = 1

[node name="Player" parent="." instance=ExtResource( 3 )]
position = Vector2( 512, 416 )

[node name="Camera2D" type="Camera2D" parent="Player"]
current = true

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0.0823529, 0.0784314, 0.0745098, 1 )
